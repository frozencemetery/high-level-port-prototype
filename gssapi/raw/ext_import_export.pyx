GSSAPI="BASE"  # This ensures that a full modules is generated by Cython

from libc.string cimport memcmp, memcpy, memset
from libc.stdlib cimport free, malloc, calloc

from gssapi.raw.cython_types cimport *
from gssapi.raw.names cimport Name
from gssapi.raw.creds cimport Creds
from gssapi.raw.oids cimport OID
from gssapi.raw.cython_converters cimport c_create_oid_set
from gssapi.raw.cython_converters cimport c_get_mech_oid_set
from gssapi.raw.cython_converters cimport c_c_ttl_to_py, c_py_ttl_to_c

from collections import namedtuple

from gssapi.raw.named_tuples import AddCredResult, AcquireCredResult
from gssapi.raw.named_tuples import StoreCredResult
from gssapi.raw.misc import GSSError

cdef extern from "gssapi/gssap_ext.h":
    OM_uint32 gss_export_cred(OM_uint32 *minor_status,
                              gss_cred_id_t cred_handle,
                              gss_buffer_t token) nogil

    OM_uint32 gss_import_cred(OM_uint32 *minor_status,
                              gss_buffer_t token,
                              gss_cred_id_t *cred_handle) nogil


def export_cred(Creds handle not None, token not None):
    cdef OM_uint32 maj_stat, min_stat

    cdef gss_cred_id_t raw_handle = handle.raw_creds

    cdef gss_buffer_desc raw_token = gss_buffer_desc(0, NULL)
    raw_token.value = token
    raw_token.length = len(token)

    with nogil:
        maj_stat = gss_export_cred(&min_stat, raw_handle, &raw_token)
        
    if maj_stat == GSS_S_COMPLETE:
        print "NYI"
    else:
        raise GSSError(maj_stat, min_stat)

def import_cred(token not None):
    cdef OM_uint32 maj_stat, min_stat

    cdef gss_buffer_desc raw_token = gss_buffer_desc(0, NULL)
    raw_token.value = token
    raw_token.length = len(token)

    cdef gss_cred_id_t raw_handle

    with nogil:
        maj_stat = gss_import_cred(&min_stat, &raw_token, &raw_handle)

    if maj_stat == GSS_S_COMPLETE:
        print "NYI"
    else:
        raise GSSError(maj_stat, min_stat)
